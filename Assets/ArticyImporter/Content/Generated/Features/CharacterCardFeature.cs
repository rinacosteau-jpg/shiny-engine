//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Articy.Unity;
using Articy.Unity.Interfaces;
using Articy.World_Of_Red_Moon;
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;


namespace Articy.World_Of_Red_Moon.Features
{
    
    
    [Serializable()]
    public class CharacterCardFeature : IArticyBaseObject, IPropertyProvider
    {
        
        [SerializeField()]
        private ArticyValueArticyMultiLanguageString mName = new ArticyValueArticyMultiLanguageString();
        
        [SerializeField()]
        private ArticyValueArticyMultiLanguageString mFraction = new ArticyValueArticyMultiLanguageString();
        
        [SerializeField()]
        private ArticyValueArticyMultiLanguageString mTitle = new ArticyValueArticyMultiLanguageString();
        
        [SerializeField()]
        private UInt64 mOwnerId;
        
        [SerializeField()]
        private UInt32 mOwnerInstanceId;
        
        public ArticyMultiLanguageString Name
        {
            get
            {
                return mName.GetValue();
            }
            set
            {
                mName.SetValue(value);
            }
        }
        
        public ArticyMultiLanguageString Fraction
        {
            get
            {
                return mFraction.GetValue();
            }
            set
            {
                mFraction.SetValue(value);
            }
        }
        
        public ArticyMultiLanguageString Title
        {
            get
            {
                return mTitle.GetValue();
            }
            set
            {
                mTitle.SetValue(value);
            }
        }
        
        public UInt64 OwnerId
        {
            get
            {
                return mOwnerId;
            }
            set
            {
                mOwnerId = value;
            }
        }
        
        public UInt32 OwnerInstanceId
        {
            get
            {
                return mOwnerInstanceId;
            }
            set
            {
                mOwnerInstanceId = value;
            }
        }
        
        private void CloneProperties(object aClone, Articy.Unity.ArticyObject aFirstClassParent)
        {
            Articy.World_Of_Red_Moon.Features.CharacterCardFeature newClone = ((Articy.World_Of_Red_Moon.Features.CharacterCardFeature)(aClone));
            if ((mName != null))
            {
                newClone.mName = ((ArticyValueArticyMultiLanguageString)(mName.CloneObject(newClone, aFirstClassParent)));
            }
            if ((mFraction != null))
            {
                newClone.mFraction = ((ArticyValueArticyMultiLanguageString)(mFraction.CloneObject(newClone, aFirstClassParent)));
            }
            if ((mTitle != null))
            {
                newClone.mTitle = ((ArticyValueArticyMultiLanguageString)(mTitle.CloneObject(newClone, aFirstClassParent)));
            }
            newClone.OwnerId = OwnerId;
        }
        
        public object CloneObject(object aParent, Articy.Unity.ArticyObject aFirstClassParent)
        {
            Articy.World_Of_Red_Moon.Features.CharacterCardFeature clone = new Articy.World_Of_Red_Moon.Features.CharacterCardFeature();
            CloneProperties(clone, aFirstClassParent);
            return clone;
        }
        
        #region property provider interface
        public void setProp(string aProperty, object aValue)
        {
            if ((aProperty == "Name"))
            {
                Name = System.Convert.ToString(aValue);
                return;
            }
            if ((aProperty == "Fraction"))
            {
                Fraction = System.Convert.ToString(aValue);
                return;
            }
            if ((aProperty == "Title"))
            {
                Title = System.Convert.ToString(aValue);
                return;
            }
        }
        
        public Articy.Unity.Interfaces.ScriptDataProxy getProp(string aProperty)
        {
            if ((aProperty == "Name"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(Name);
            }
            if ((aProperty == "Fraction"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(Fraction);
            }
            if ((aProperty == "Title"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(Title);
            }
            return null;
        }
        #endregion
    }
}
